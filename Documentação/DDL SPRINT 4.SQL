CREATE TABLE "ITO1"."ASSOC_GEOLOC_SESSAO" 
   (	"ID_SESSAO" NUMBER NOT NULL ENABLE, 
	"ID_DISPOSITIVO" NUMBER NOT NULL ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

ALTER TABLE "ITO1"."ASSOC_GEOLOC_SESSAO" ADD CONSTRAINT "FK_GEO_LOCALIZACAO" FOREIGN KEY ("ID_DISPOSITIVO")
	  REFERENCES "ITO1"."DISPOSITIVO" ("ID_DISPOSITIVO") ENABLE;
  ALTER TABLE "ITO1"."ASSOC_GEOLOC_SESSAO" ADD CONSTRAINT "FK_SESSAO_GEOMETRICA" FOREIGN KEY ("ID_SESSAO")
	  REFERENCES "ITO1"."SESSAO_GEOMETRICA" ("ID_SESSAO") ENABLE;

CREATE TABLE "ITO1"."DISPOSITIVO" 
   (	"ID_DISPOSITIVO" NUMBER, 
	"CODIGO" VARCHAR2(15) COLLATE "USING_NLS_COMP", 
	"NOME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"TIPO" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"STATUS" NUMBER(1,0), 
	"ID_USUARIO" NUMBER, 
	 PRIMARY KEY ("ID_DISPOSITIVO")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

ALTER TABLE "ITO1"."DISPOSITIVO" ADD CONSTRAINT "FK_ID_USUARIO" FOREIGN KEY ("ID_USUARIO")
	  REFERENCES "ITO1"."USUARIO" ("ID_USUARIO") ENABLE;

CREATE OR REPLACE EDITIONABLE TRIGGER "ITO1"."TRG_IDDISPOSITIVO" 
BEFORE INSERT ON ITO1.dispositivo
FOR EACH ROW
BEGIN
    IF :new.id_dispositivo IS NULL THEN
        SELECT ITO1.seq_idDispositivo.NEXTVAL INTO :new.id_dispositivo FROM dual;
    END IF;
END;
/
ALTER TRIGGER "ITO1"."TRG_IDDISPOSITIVO" ENABLE;

CREATE UNIQUE INDEX "ITO1"."IDX_DISPOSITIVO_CODIGO" ON "ITO1"."DISPOSITIVO" ("CODIGO") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
  CREATE UNIQUE INDEX "ITO1"."SYS_C0022911" ON "ITO1"."DISPOSITIVO" ("ID_DISPOSITIVO") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
  CREATE INDEX "ITO1"."IDX_DISPOSITIVO_CODIGO_USER" ON "ITO1"."DISPOSITIVO" ("CODIGO", "ID_USUARIO") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

CREATE TABLE "ITO1"."GEO_LOCALIZACAO" 
   (	"ID_LOCALIZACAO" VARCHAR2(38) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"LOC_GEO" "SDO_GEOMETRY", 
	"DATA_HORA" TIMESTAMP (6), 
	"DATA_REFERENCIA" DATE, 
	"ID_DISPOSITIVO" NUMBER
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" 
 VARRAY "LOC_GEO"."SDO_ELEM_INFO" STORE AS SECUREFILE LOB 
  ( TABLESPACE "DATA" ENABLE STORAGE IN ROW CHUNK 8192
  CACHE  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 VARRAY "LOC_GEO"."SDO_ORDINATES" STORE AS SECUREFILE LOB 
  ( TABLESPACE "DATA" ENABLE STORAGE IN ROW CHUNK 8192
  CACHE  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;

CREATE OR REPLACE EDITIONABLE TRIGGER "ITO1"."TRIG_GEO_LOCALIZACAO" 
AFTER INSERT ON ito1.geo_localizacao
FOR EACH ROW
DECLARE
    -- Variáveis para armazenar a latitude e longitude da inserção
    temp_latitude NUMBER(17, 15);
    temp_longitude NUMBER(17, 15);

    -- Variáveis para comparação de distância
    temp_distance NUMBER;
    -- Variável para armazenar o resultado da verificação de existência
    registro_existente NUMBER; 
BEGIN

    --extrai longitude e latitude inserido na geo_localizacao (do tipo SDO_GEOMETRY) e armazena nas variaveis temporarias
    IF :NEW.loc_geo.sdo_point IS NOT NULL THEN
        temp_longitude := :NEW.loc_geo.sdo_point.x;
        temp_latitude := :NEW.loc_geo.sdo_point.y;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Geometria sem ponto válido.');
    END IF;

     -- laço para percorrer por todas as sessoes geometricas cadastradas e armazenando-as no registro sessao
    FOR sessao IN (
        SELECT id_sessao, latitude_centro, longitude_centro, raio
        FROM ito1.sessao_geometrica
        WHERE status = 1
    ) LOOP

        -- calculo entre as locs inseridas e as locs de centro e raio das zonas geometricas, se a distancia for menor ou igual ao raio da sessao, vai ser inserido na tabela de associaçao
        temp_distance := SDO_GEOM.SDO_DISTANCE(
            SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(temp_longitude, temp_latitude, NULL), NULL, NULL),
            SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(sessao.longitude_centro, sessao.latitude_centro, NULL), NULL, NULL),
            0.005
        )* 111000;

        -- Verifica se a distância está dentro do raio e se não existe uma associação já cadastrada
        IF temp_distance <= sessao.raio THEN
            SELECT COUNT(1)
            INTO registro_existente
            FROM ito1.assoc_geoloc_sessao
            WHERE id_sessao = sessao.id_sessao
              AND id_dispositivo = :NEW.id_dispositivo;
                  
            IF registro_existente = 0 THEN
                INSERT INTO ito1.assoc_geoloc_sessao (id_sessao, id_dispositivo)
                VALUES (sessao.id_sessao, :NEW.id_dispositivo);
            END IF;
        END IF;
    END LOOP;
END;
/
ALTER TRIGGER "ITO1"."TRIG_GEO_LOCALIZACAO" ENABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "ITO1"."TRIG_GEO_LOCALIZACAO_ID" 
BEFORE INSERT ON ITO1.GEO_LOCALIZACAO
FOR EACH ROW
BEGIN
  IF :NEW.id_localizacao IS NULL THEN
    :NEW.id_localizacao := TO_CHAR(SYS_GUID());
  END IF;
END;

/
ALTER TRIGGER "ITO1"."TRIG_GEO_LOCALIZACAO_ID" ENABLE;

CREATE TABLE "ITO1"."LOCALIZACAO" 
   (	"ID_LOCALIZACAO" VARCHAR2(38) COLLATE "USING_NLS_COMP", 
	"LATITUDE" NUMBER, 
	"LONGITUDE" NUMBER, 
	"DATA_HORA" TIMESTAMP (6), 
	"DATA_REFERENCIA" DATE, 
	"ID_DISPOSITIVO" NUMBER, 
	 PRIMARY KEY ("ID_LOCALIZACAO")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" 
  PARTITION BY RANGE ("DATA_REFERENCIA") INTERVAL (INTERVAL '1' DAY) 
  SUBPARTITION BY LIST ("ID_DISPOSITIVO") 
  SUBPARTITION TEMPLATE ( 
    SUBPARTITION "SUBP_1" VALUES ( 1 ), 
    SUBPARTITION "SUBP_2" VALUES ( 2 ), 
    SUBPARTITION "SUBP_3" VALUES ( 3 ), 
    SUBPARTITION "SUBP_4" VALUES ( 4 ), 
    SUBPARTITION "SUBP_5" VALUES ( 5 ), 
    SUBPARTITION "SUBP_6" VALUES ( 6 ), 
    SUBPARTITION "SUBP_7" VALUES ( 7 ), 
    SUBPARTITION "SUBP_8" VALUES ( 8 ), 
    SUBPARTITION "SUBP_9" VALUES ( 9 ), 
    SUBPARTITION "SUBP_10" VALUES ( 10 ), 
    SUBPARTITION "SUBP_11" VALUES ( 11 ), 
    SUBPARTITION "SUBP_12" VALUES ( 12 ), 
    SUBPARTITION "SUBP_13" VALUES ( 13 ), 
    SUBPARTITION "SUBP_14" VALUES ( 14 ), 
    SUBPARTITION "SUBP_15" VALUES ( 15 ), 
    SUBPARTITION "SUBP_16" VALUES ( 16 ), 
    SUBPARTITION "SUBP_17" VALUES ( 17 ), 
    SUBPARTITION "SUBP_18" VALUES ( 18 ), 
    SUBPARTITION "SUBP_19" VALUES ( 19 ), 
    SUBPARTITION "SUBP_20" VALUES ( 20 ), 
    SUBPARTITION "SUBP_21" VALUES ( 21 ), 
    SUBPARTITION "SUBP_22" VALUES ( 22 ), 
    SUBPARTITION "SUBP_23" VALUES ( 23 ), 
    SUBPARTITION "SUBP_24" VALUES ( 24 ), 
    SUBPARTITION "SUBP_25" VALUES ( 25 ), 
    SUBPARTITION "SUBP_26" VALUES ( 26 ), 
    SUBPARTITION "SUBP_27" VALUES ( 27 ), 
    SUBPARTITION "SUBP_28" VALUES ( 28 ), 
    SUBPARTITION "SUBP_29" VALUES ( 29 ), 
    SUBPARTITION "SUBP_30" VALUES ( 30 ), 
    SUBPARTITION "SUBP_31" VALUES ( 31 ), 
    SUBPARTITION "SUBP_32" VALUES ( 32 ), 
    SUBPARTITION "SUBP_33" VALUES ( 33 ), 
    SUBPARTITION "SUBP_34" VALUES ( 34 ), 
    SUBPARTITION "SUBP_35" VALUES ( 35 ), 
    SUBPARTITION "SUBP_36" VALUES ( 36 ), 
    SUBPARTITION "SUBP_37" VALUES ( 37 ), 
    SUBPARTITION "SUBP_38" VALUES ( 38 ), 
    SUBPARTITION "SUBP_39" VALUES ( 39 ), 
    SUBPARTITION "SUBP_40" VALUES ( 40 ), 
    SUBPARTITION "SUBP_41" VALUES ( 41 ), 
    SUBPARTITION "SUBP_42" VALUES ( 42 ), 
    SUBPARTITION "SUBP_43" VALUES ( 43 ), 
    SUBPARTITION "SUBP_44" VALUES ( 44 ), 
    SUBPARTITION "SUBP_45" VALUES ( 45 ), 
    SUBPARTITION "SUBP_46" VALUES ( 46 ), 
    SUBPARTITION "SUBP_47" VALUES ( 47 ), 
    SUBPARTITION "SUBP_48" VALUES ( 48 ), 
    SUBPARTITION "SUBP_49" VALUES ( 49 ), 
    SUBPARTITION "SUBP_50" VALUES ( 50 ) ) 
 (PARTITION "P1"  VALUES LESS THAN (TO_DATE(' 2000-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN')) 
PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ) ;

ALTER TABLE "ITO1"."LOCALIZACAO" ADD CONSTRAINT "FK_ID_DISPOSITIVO" FOREIGN KEY ("ID_DISPOSITIVO")
	  REFERENCES "ITO1"."DISPOSITIVO" ("ID_DISPOSITIVO") ON DELETE CASCADE ENABLE;

CREATE UNIQUE INDEX "ITO1"."SYS_C0022913" ON "ITO1"."LOCALIZACAO" ("ID_LOCALIZACAO") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
  CREATE INDEX "ITO1"."IDX_LOCALIZACAO_DISP_REF" ON "ITO1"."LOCALIZACAO" ("ID_DISPOSITIVO", "DATA_REFERENCIA") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT) LOCAL
 (PARTITION "P1" NOCOMPRESS 
PCTFREE 10 INITRANS 20 MAXTRANS 255 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
 ( SUBPARTITION "P1_SUBP_1" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_2" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_3" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_4" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_5" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_6" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_7" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_8" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_9" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_10" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_11" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_12" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_13" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_14" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_15" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_16" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_17" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_18" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_19" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_20" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_21" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_22" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_23" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_24" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_25" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_26" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_27" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_28" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_29" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_30" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_31" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_32" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_33" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_34" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_35" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_36" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_37" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_38" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_39" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_40" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_41" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_42" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_43" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_44" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_45" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_46" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_47" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_48" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_49" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" , 
  SUBPARTITION "P1_SUBP_50" 
  STORAGE(
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ) ) ;

CREATE TABLE "ITO1"."LOGIN" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NOME" VARCHAR2(200) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"EMAIL" VARCHAR2(200) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"SENHA" VARCHAR2(500) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	 PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE, 
	 UNIQUE ("EMAIL")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

CREATE UNIQUE INDEX "ITO1"."SYS_C0023082" ON "ITO1"."LOGIN" ("ID") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
  CREATE UNIQUE INDEX "ITO1"."SYS_C0023083" ON "ITO1"."LOGIN" ("EMAIL") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

CREATE TABLE "ITO1"."SESSAO_GEOMETRICA" 
   (	"ID_SESSAO" NUMBER(*,0) NOT NULL ENABLE, 
	"NOME" VARCHAR2(50) COLLATE "USING_NLS_COMP", 
	"STATUS" NUMBER(1,0), 
	"TIPO" VARCHAR2(10) COLLATE "USING_NLS_COMP", 
	"LONGITUDE_CENTRO" NUMBER(17,15), 
	"LATITUDE_CENTRO" NUMBER(17,15), 
	"RAIO" NUMBER(38,15), 
	"PROCESSADO" NUMBER(1,0) DEFAULT 0, 
	 CHECK ( status IN ( 0, 1 ) ) ENABLE, 
	 PRIMARY KEY ("ID_SESSAO")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE, 
	 CHECK (processado IN (0, 1)) ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

CREATE OR REPLACE EDITIONABLE TRIGGER "ITO1"."TRIG_GEO_SESSAO" 
AFTER INSERT ON ITO1.SESSAO_GEOMETRICA
FOR EACH ROW
DECLARE
    -- Variáveis para armazenar a latitude e longitude da inserção
    temp_latitude NUMBER(17, 15);
    temp_longitude NUMBER(17, 15);

    -- Variáveis para comparação de distância
    temp_distance NUMBER;
    -- Variável para armazenar o resultado da verificação de existência
    registro_existente NUMBER;
BEGIN

    --EXTRAI LONGITUDE E LATITUDE INSERIDO NA SESSAO E ARMAZENA NAS VARIAVEIS TEMPORAIS
    IF :NEW.longitude_centro IS NOT NULL THEN
        temp_longitude := :NEW.longitude_centro;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Sessao Geometrica não é valida.');
    END IF;
    
    IF :NEW.latitude_centro IS NOT NULL THEN
        temp_latitude := :NEW.latitude_centro;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Sessao Geometrica não é valida.');
    END IF;
    
    FOR loc IN (
        SELECT loc_geo, data_referencia, id_dispositivo
        FROM ito1.geo_localizacao
    ) LOOP

        temp_distance := SDO_GEOM.SDO_DISTANCE(
            SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(temp_longitude, temp_latitude, NULL), NULL, NULL),
            SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(loc.loc_geo.sdo_point.x, loc.loc_geo.sdo_point.y, NULL), NULL, NULL),
            0.005
        )* 111000;

        IF temp_distance <= :NEW.raio THEN
            SELECT COUNT(1)
            INTO registro_existente
            FROM ito1.assoc_geoloc_sessao
            WHERE id_sessao = :NEW.id_sessao
              AND id_dispositivo = loc.id_dispositivo;

            IF registro_existente = 0 THEN
                INSERT INTO ito1.assoc_geoloc_sessao (id_sessao, id_dispositivo, data_associacao)
                VALUES (:NEW.id_sessao, loc.id_dispositivo, loc.data_referencia);
            END IF;
        END IF;
    END LOOP;
END;
/
ALTER TRIGGER "ITO1"."TRIG_GEO_SESSAO" DISABLE;
  CREATE OR REPLACE EDITIONABLE TRIGGER "ITO1"."TRG_ID_SESSAO" BEFORE
    INSERT ON ito1.sessao_geometrica
    FOR EACH ROW
BEGIN
    IF :new.id_sessao IS NULL THEN
        SELECT
            ito1.seq_id_sessao.nextval
        INTO :new.id_sessao
        FROM
            dual;

    END IF;
END;

/
ALTER TRIGGER "ITO1"."TRG_ID_SESSAO" ENABLE;

CREATE UNIQUE INDEX "ITO1"."SYS_C0023031" ON "ITO1"."SESSAO_GEOMETRICA" ("ID_SESSAO") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

CREATE TABLE "ITO1"."USUARIO" 
   (	"ID_USUARIO" NUMBER, 
	"NOME" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	"CARGO" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"SENHA" VARCHAR2(500) COLLATE "USING_NLS_COMP", 
	"CPF" VARCHAR2(11) COLLATE "USING_NLS_COMP", 
	 PRIMARY KEY ("ID_USUARIO")
  USING INDEX PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA"  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 10 MAXTRANS 255 
 COLUMN STORE COMPRESS FOR QUERY HIGH ROW LEVEL LOCKING LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

CREATE UNIQUE INDEX "ITO1"."SYS_C0022910" ON "ITO1"."USUARIO" ("ID_USUARIO") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;
  CREATE INDEX "ITO1"."IDX_USUARIO_LOGIN" ON "ITO1"."USUARIO" ("CPF", "SENHA") 
  PCTFREE 10 INITRANS 20 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "DATA" ;

CREATE OR REPLACE PROCEDURE ITO1.proc_geo_sessao IS
    -- Variáveis auxiliares
    temp_latitude      NUMBER(17, 15);
    temp_longitude     NUMBER(17, 15);
    temp_distance      NUMBER;
    registro_existente NUMBER;
BEGIN
    -- Loop para processar cada sessão geométrica não processada
    FOR sessao IN (
        SELECT
            id_sessao,
            longitude_centro,
            latitude_centro,
            raio
        FROM
            ito1.sessao_geometrica
        WHERE
                processado = 0
            AND status = 1
    ) LOOP
        -- Verificar e atribuir longitude e latitude do centro
        IF sessao.longitude_centro IS NOT NULL THEN
            temp_longitude := sessao.longitude_centro;
        ELSE
            raise_application_error(-20001, 'Geometria sem ponto válido (longitude)');
        END IF;

        IF sessao.latitude_centro IS NOT NULL THEN
            temp_latitude := sessao.latitude_centro;
        ELSE
            raise_application_error(-20001, 'Geometria sem ponto válido (latitude)');
        END IF;

        -- Loop para localizar dispositivos ainda não associados à sessão
        FOR registro IN (
            SELECT
                loc_geo,
                id_dispositivo
            FROM
                ito1.geo_localizacao loc
            WHERE
                NOT EXISTS (
                    SELECT
                        1
                    FROM
                        ito1.assoc_geoloc_sessao assoc
                    WHERE
                            assoc.id_sessao = sessao.id_sessao
                        AND assoc.id_dispositivo = loc.id_dispositivo
                )
        ) LOOP
        
                -- Calcular a distância entre o centro da sessão e a localização
            temp_distance := sdo_geom.sdo_distance(
                sdo_geometry(2001,
                             NULL,
                             sdo_point_type(temp_longitude, temp_latitude, NULL),
                             NULL,
                             NULL),
                sdo_geometry(2001,
                             NULL,
                             sdo_point_type(registro.loc_geo.sdo_point.x,
                                            registro.loc_geo.sdo_point.y,
                                            NULL),
                             NULL,
                             NULL),
                0.005
            ) * 111000;

                -- Inserir na tabela de associação se a distância estiver dentro do raio
            IF temp_distance <= sessao.raio THEN
                SELECT
                    COUNT(1)
                INTO registro_existente
                FROM
                    ito1.assoc_geoloc_sessao
                WHERE
                        id_sessao = sessao.id_sessao
                    AND id_dispositivo = registro.id_dispositivo;

                IF registro_existente = 0 THEN
                    INSERT INTO ito1.assoc_geoloc_sessao (
                        id_sessao,
                        id_dispositivo
                    ) VALUES ( sessao.id_sessao,
                               registro.id_dispositivo);

                END IF;

            END IF;

        END LOOP;

        -- Marcar a sessão como processada
        UPDATE ito1.sessao_geometrica
        SET
            processado = 1
        WHERE
            id_sessao = sessao.id_sessao;

    END LOOP;

    -- Confirmar as alterações
    COMMIT;
END;

CREATE OR REPLACE trigger ito1.trig_geo_localizacao
AFTER INSERT ON ito1.geo_localizacao
FOR EACH ROW
DECLARE
    -- Variáveis para armazenar a latitude e longitude da inserção
    temp_latitude NUMBER(17, 15);
    temp_longitude NUMBER(17, 15);

    -- Variáveis para comparação de distância
    temp_distance NUMBER;
    -- Variável para armazenar o resultado da verificação de existência
    registro_existente NUMBER; 
BEGIN

    --extrai longitude e latitude inserido na geo_localizacao (do tipo SDO_GEOMETRY) e armazena nas variaveis temporarias
    IF :NEW.loc_geo.sdo_point IS NOT NULL THEN
        temp_longitude := :NEW.loc_geo.sdo_point.x;
        temp_latitude := :NEW.loc_geo.sdo_point.y;
    ELSE
        RAISE_APPLICATION_ERROR(-20001, 'Geometria sem ponto válido.');
    END IF;

     -- laço para percorrer por todas as sessoes geometricas cadastradas e armazenando-as no registro sessao
    FOR sessao IN (
        SELECT id_sessao, latitude_centro, longitude_centro, raio
        FROM ito1.sessao_geometrica
        WHERE status = 1
    ) LOOP

        -- calculo entre as locs inseridas e as locs de centro e raio das zonas geometricas, se a distancia for menor ou igual ao raio da sessao, vai ser inserido na tabela de associaçao
        temp_distance := SDO_GEOM.SDO_DISTANCE(
            SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(temp_longitude, temp_latitude, NULL), NULL, NULL),
            SDO_GEOMETRY(2001, NULL, SDO_POINT_TYPE(sessao.longitude_centro, sessao.latitude_centro, NULL), NULL, NULL),
            0.005
        )* 111000;

        -- Verifica se a distância está dentro do raio e se não existe uma associação já cadastrada
        IF temp_distance <= sessao.raio THEN
            SELECT COUNT(1)
            INTO registro_existente
            FROM ito1.assoc_geoloc_sessao
            WHERE id_sessao = sessao.id_sessao
              AND id_dispositivo = :NEW.id_dispositivo;
                  
            IF registro_existente = 0 THEN
                INSERT INTO ito1.assoc_geoloc_sessao (id_sessao, id_dispositivo)
                VALUES (sessao.id_sessao, :NEW.id_dispositivo);
            END IF;
        END IF;
    END LOOP;
END;

CREATE OR REPLACE TRIGGER ITO1.TRIG_GEO_LOCALIZACAO_ID
BEFORE INSERT ON ITO1.GEO_LOCALIZACAO
FOR EACH ROW
BEGIN
  IF :NEW.id_localizacao IS NULL THEN
    :NEW.id_localizacao := TO_CHAR(SYS_GUID());
  END IF;
END;

CREATE OR REPLACE TRIGGER ito1.trg_id_sessao BEFORE
    INSERT ON ito1.sessao_geometrica
    FOR EACH ROW
BEGIN
    IF :new.id_sessao IS NULL THEN
        SELECT
            ito1.seq_id_sessao.nextval
        INTO :new.id_sessao
        FROM
            dual;

    END IF;
END;

CREATE OR REPLACE TRIGGER ITO1.trg_idDispositivo
BEFORE INSERT ON ITO1.dispositivo
FOR EACH ROW
BEGIN
    IF :new.id_dispositivo IS NULL THEN
        SELECT ITO1.seq_idDispositivo.NEXTVAL INTO :new.id_dispositivo FROM dual;
    END IF;
END;
